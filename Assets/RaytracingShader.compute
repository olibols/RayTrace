#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 CameraToWorld;
float4x4 CameraInverse;
float4 LightDir;

Texture2D<float4> SkyboxTexture;
SamplerState sampler_SkyboxTexture;

StructuredBuffer<int> Blocks;
StructuredBuffer<int3> PaletteBuffer;

RWStructuredBuffer<float4> debug;

static const float PI = 3.14159265f;
static const int CHUNK_SIZE = 32;
static const float MAX_VAL = 99999999999.0f;
static const uint MAX_STEPS = 400;

bool test = false;

struct Ray
{
    float3 Origin;
    float3 Direction;
    float3 Energy;
};

struct VoxelHit
{
    int3 Position;
    int VoxelType;
};

struct RayHit
{
    float3 Position;
    float3 Normal;
    float Distance;
};

VoxelHit CreateVoxelHit(int3 position, int voxeltype)
{
    VoxelHit hit;
    hit.Position = position;
    hit.VoxelType = voxeltype;
    return hit;
}

RayHit CreateRayHit(float3 position, float3 normal, float distance)
{
    RayHit hit;
    hit.Position = position;
    hit.Normal = normal;
    hit.Distance = distance;
    return hit;
}

Ray CreateRay(float3 Origin, float3 Direction)
{
    Ray ray;
    ray.Origin = Origin;
    ray.Direction = Direction;
    ray.Energy = float3(1.0, 1.0, 1.0);
    return ray;
};

float nrand(float3 uv)
{
    float val = frac(sin(dot(uv.xyz, float3(12.9898, 78.233, 16.9898))) * 43758.5453 );
    val /= 10;
    val += 0.9;
    return val;
}

//Create the normalized ray in a direction for a given pixel
Ray CreateCameraRay(float2 pixel)
{
    float3 origin = mul(CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    float3 direction = mul(CameraInverse, float4(pixel, 0.0f, 1.0f)).xyz;
    direction = mul(CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
	
    return CreateRay(origin, direction);
}

float3 IntToRGB(int color)
{
    float3 col = PaletteBuffer[color] / 255.0f;
    return col.rgb;
}

int GetVoxel(int x, int y, int z)
{
    if (x < 0 || x > CHUNK_SIZE || y < 0 || y > CHUNK_SIZE || z < 0 || z > CHUNK_SIZE)
        return 257;
    
    return Blocks[x + CHUNK_SIZE * (y + CHUNK_SIZE * z)];
}

int GetColorIndex(int voxel)
{
    return voxel & 0xFF;
}

int GetDistanceStep(int voxel)
{
    return (voxel >> 8) & 0xFF;
}

float DistanceToBox(float3 raypos, int3 pos)
{
    float3 q = abs(raypos - pos) - 0.5f;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float SDFIntersect(Ray ray, int3 pos)
{
    float depth = 0.0f;
    for (int i = 0; i < 30; i++)
    {
        float dist = DistanceToBox(ray.Origin + depth * ray.Direction, pos);
        depth += dist;
    }
    return depth;
}

VoxelHit VoxelIntersect(Ray ray)
{
    int3 currentvoxel = int3(floor(ray.Origin.x), floor(ray.Origin.y), floor(ray.Origin.z));
    
    float3 deltaDist = abs(length(ray.Direction).xxx / ray.Direction);
    float3 sideDist = (sign(ray.Direction) * (float3(currentvoxel) - ray.Origin) + (sign(ray.Direction) * 0.5) + 0.5) * deltaDist;
    float3 mask;
    int3 rayStep = int3(sign(ray.Direction));
    float totaldist = 0.0;
    
    for (uint i = 0; i < MAX_STEPS; i++)
    {
        uint block = GetVoxel(currentvoxel.x, currentvoxel.y, currentvoxel.z);
        int dist = GetDistanceStep(block) - 1;
        if (GetColorIndex(block) != 0 && block != 257)
        {
            VoxelHit hit = CreateVoxelHit(currentvoxel, block);
            return hit;
        }
        
        float3 mi = min(min(sideDist.x, sideDist.y), sideDist.z) - sideDist;
        mask = ceil((max(dist - 1.0, 0.01) + mi) / deltaDist);
        sideDist += mask * deltaDist;
        currentvoxel += int3(mask) * rayStep;
        totaldist += 1;
    }
    
    VoxelHit hit = CreateVoxelHit(int3(0, 0, 0), 0);
    return hit;
}

float map(float value, float low1, float high1, float low2, float high2)
{
    return low2 + (value - low1) * (high2 - low2) / (high1 - low1);
}


float3 Shade(inout Ray ray, VoxelHit hit)
{
    if (hit.VoxelType == 0)
    {
        ray.Energy = 0.0f;
        
        float theta = acos(ray.Direction.y) / -PI;
        float phi = atan2(ray.Direction.x, -ray.Direction.z) / -PI * 0.5f;
        return SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
    else
    {
        float3 SurfaceCol = IntToRGB(GetColorIndex(hit.VoxelType)) * nrand(hit.Position);
        
        float shadow = 0.0;
        float3 ShadowRayDirection = -LightDir.xyz;
        float3 ShadowRayOrigin = hit.Position + 0.5f;
        
        float stepX = (ShadowRayDirection.x >= 0) ? 0.49 : -0.49;
        float stepY = (ShadowRayDirection.y >= 0) ? 0.5 : -0.5;
        float stepZ = (ShadowRayDirection.z >= 0) ? 0.49 : -0.49;
            
        float tDeltaX = (ray.Direction.x != 0) ? 1.0 / ray.Direction.x * stepX : MAX_VAL;
        float tDeltaY = (ray.Direction.y != 0) ? 1.0 / ray.Direction.y * stepY : MAX_VAL;
        float tDeltaZ = (ray.Direction.z != 0) ? 1.0 / ray.Direction.z * stepZ : MAX_VAL;
                
        Ray ray = CreateRay(ShadowRayOrigin + float3(stepX, stepY, stepZ), ShadowRayDirection);
        if (VoxelIntersect(ray).VoxelType != 0)
        {
            shadow = 1.0;
        }
              
        return lerp(SurfaceCol, SurfaceCol * 0.7, shadow);
    }
}

float3 Render(Ray ray)
{
    float3 result = float3(0.0, 0.0, 0.0);
    VoxelHit hit = VoxelIntersect(ray);
    result = Shade(ray, hit);
    return result;
}

[numthreads(32, 32, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    float2 pixel = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
	
    Ray ray = CreateCameraRay(pixel);
	
    float3 res = Render(ray);
    
    Result[id.xy] = float4(res, 0.0f);
}